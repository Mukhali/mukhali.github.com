<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>玩具 on 当然我在扯淡</title><link>https://mukhali.github.io/categories/%E7%8E%A9%E5%85%B7/</link><description>Recent content in 玩具 on 当然我在扯淡</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 18 Feb 2019 22:37:25 +0800</lastBuildDate><atom:link href="https://mukhali.github.io/categories/%E7%8E%A9%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>C#调用Cpp语言DLL</title><link>https://mukhali.github.io/2019/csharp%E8%B0%83%E7%94%A8cpp%E8%AF%AD%E8%A8%80dll/</link><pubDate>Mon, 18 Feb 2019 22:37:25 +0800</pubDate><guid>https://mukhali.github.io/2019/csharp%E8%B0%83%E7%94%A8cpp%E8%AF%AD%E8%A8%80dll/</guid><description>0x00 引言 再简单的事情，也需要有人去做。
0x01 Cpp工程 CppMath.h
#pragma once #include &amp;lt;stdexcept&amp;gt; class CppMath { public: double Add(double arg1,double arg2); }; CppMath.cpp
#pragma once #include &amp;quot;CppMath.h&amp;quot; double CppMath::Add(double arg1,double arg2) { return arg1+arg2; } 0x02 CLR Wrapper工程 CLRWrapper.h
#pragma once #include &amp;quot;CppMath.h&amp;quot; using namespace System; namespace CLRWrapper { public ref class CppMathWrapper { public: //ctor CppMathWrapper(); //Methods double Add(double arg1,double arg2); private: CppMath *cppMath; }; } CLRWrapper.</description></item><item><title>C#调用C语言DLL</title><link>https://mukhali.github.io/2019/csharp%E8%B0%83%E7%94%A8c%E8%AF%AD%E8%A8%80dll/</link><pubDate>Mon, 18 Feb 2019 22:09:25 +0800</pubDate><guid>https://mukhali.github.io/2019/csharp%E8%B0%83%E7%94%A8c%E8%AF%AD%E8%A8%80dll/</guid><description> 0x00 引言 再简单的事情，也需要有人去做。
0x01 .h文件 demo.h
extern &amp;quot;C&amp;quot; __declspec(dllexport) double Add(double a, double b); 0x02 .cpp文件 demo.cpp
double Add( double a, double b ) { return a+b; } 0x03 C#实现 prograss.cs
using System.Runtime.InteropServices; [DllImport(&amp;quot;MathFuncsDll.dll&amp;quot;, CallingConvention=CallingConvention.Cdecl)] public static extern double Add(double a, double b); public static void main() { c = Add(c, c); } 0x04 UPDATE 2019-02-18</description></item><item><title>Golang的面向对象</title><link>https://mukhali.github.io/2019/golang%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link><pubDate>Sun, 13 Jan 2019 17:22:39 +0800</pubDate><guid>https://mukhali.github.io/2019/golang%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid><description>0x00 引言 再简单的事情，也需要有人去做。
0x01 成员变量 type Person struct { name string age int } person := Person{&amp;quot;mike&amp;quot;,18} fmt.Println(person) 0x02 成员函数 func (person *Person) showInfo() { fmt.Printf(&amp;quot;My name is %s , age is %d &amp;quot;,person.name,person.age) } func (person *Person) setAge(age int) { person.age = age } person := Person{&amp;quot;mike&amp;quot;,18} person.showInfo() person.setAge(20) fmt,Println(person) 0x03 继承 没有关键字的继承。
type Student struct { Person id int score int } func (student *Student) showInfo() { fmt.</description></item><item><title>Golang操作Sqlite</title><link>https://mukhali.github.io/2019/golang%E6%93%8D%E4%BD%9Csqlite/</link><pubDate>Sun, 13 Jan 2019 11:08:30 +0800</pubDate><guid>https://mukhali.github.io/2019/golang%E6%93%8D%E4%BD%9Csqlite/</guid><description>0x00 引言 再简单的事情，也需要有人去做。
0x01 代码 package main import ( &amp;quot;database/sql&amp;quot; &amp;quot;fmt&amp;quot; _ &amp;quot;github.com/mattn/go-sqlite3&amp;quot; &amp;quot;os&amp;quot; ) func main() { type Person struct { name string age int } person := Person{&amp;quot;mike&amp;quot;,18} fmt.Println(person) os.Remove(&amp;quot;./foo.db&amp;quot;) db, err := sql.Open(&amp;quot;sqlite3&amp;quot;, &amp;quot;./foo.db&amp;quot;) checkErr(err) defer db.Close() //插入数据 _, err = db.Exec(&amp;quot;create table userinfo (uid text not null primary key, username text, departname text, created text)&amp;quot;) checkErr(err) stmt, err := db.Prepare(&amp;quot;INSERT INTO userinfo(uid, username, departname, created) values(?</description></item></channel></rss>