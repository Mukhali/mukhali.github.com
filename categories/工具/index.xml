<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>工具 on 当然我在扯淡</title><link>https://mukhali.github.io/categories/%E5%B7%A5%E5%85%B7/</link><description>Recent content in 工具 on 当然我在扯淡</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 17 May 2019 20:44:27 +0800</lastBuildDate><atom:link href="https://mukhali.github.io/categories/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml"/><item><title>Ubuntu如何安装Docker-CE</title><link>https://mukhali.github.io/2019/ubuntu%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85docker-ce/</link><pubDate>Fri, 17 May 2019 20:44:27 +0800</pubDate><guid>https://mukhali.github.io/2019/ubuntu%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85docker-ce/</guid><description>0x00 引言 Docker 是我最喜欢的工具，但好像对我来是只是很好的工具，我不知道。
0x01 安装 Docker-CE Ubuntu 官方没有 Docker-CE，只能去使用 Docker 公司维护的库。具体添加方法如下：
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo add-apt-repository &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable edge test&amp;quot; sudo apt update sudo apt install Docker-CE 先添加key，再添加库。
stable 是 Docker 公司的季度发布包。
edge 是 Docker 公司的月发布包。
test 是 Docker 公司的测试版。
比如到2019年05月22日为止， Ubuntu 19.04 还没有释放 stable， edge版Docker。但可以安装 test 版 Docker。
0x02 设置 通过下面命令来查看 Docker 运行状态。
sudo systemctl status docker # 查看 Docker 运行状态 默认是开启启动 Docker Deamon。我好像不喜欢这样，所以我会使用下面的命令禁止开机启动 Docker Deamon。</description></item><item><title>OpenCV历史</title><link>https://mukhali.github.io/2019/opencv%E5%8E%86%E5%8F%B2/</link><pubDate>Thu, 25 Apr 2019 21:41:48 +0800</pubDate><guid>https://mukhali.github.io/2019/opencv%E5%8E%86%E5%8F%B2/</guid><description>0x00 引言 最近在看 OpenCV 好想用OpenCV 4，但考虑到生态，还是用 OpenCV 3.4.2。稍微了解了一下 OpenCV 的历史。这些年来，计算机视觉领域的新技术新方法不断涌现，指令集、编程语言和并行化技术越发先进，OpenCV 也在顺应潮流。
0x01 OpenCV 1.x 就像很多程序一样，OpenCV 是基于C语言开发。2006年10月发布1.0，其中已经有了random trees、boosted trees、neural nets等机器学习方法。
2008年10月1.1pre1发布，使用 VS2005构建，Python bindings支持Python 2.6，Linux下支持Octave bindings，在这一版本中加入了SURF、RANSAC、Fast approximate nearest neighbor search等，Face Detection (cvHaarDetectObjects)也变得更快。
0x02 OpenCV 2.x 代码量的增加，C++的流行，OpenCV 2.x发布时，其尽量使用C++而不是C，但是为了向前兼容，仍保留了对C API的支持。从2010年开始，2.x决定不再频繁支持和更新C API，而是focus在C++ API。
2009年9月2.0 beta发布，主要使用CMake构建，加入了很多新特征、描述子等，如FAST、LBP等。
2010年10月2.2版本发布，OpenCV的模块变成了大家熟悉的模样，像opencv_imgproc、opencv_features2d等，同时用opencv_contrib放置尚未成熟的代码，opencv_gpu放置使用CUDA加速的OpenCV函数。
2011年6月起的2.3.x版本、2012年4月起的2.4.x版本，一面增加新方法，一面修复bug，同时加强对GPU、Java for Android、 OpenCL、并行化的支持等等，OpenCV愈加稳定完善，值得注意的是 SIFT和SURF从2.4开始被放到了nonfree 模块（因为专利）。
考虑到过渡，OpenCV 2.4.x仍在维护，不过以后可能仅做bug修复和效率提升，不再增加新功能——鼓励向3.x迁移。
0x03 OpenCV 3.x 随着3.x的发布，1.x的C API将被淘汰不再被支持，以后C API可能通过C++源代码自动生成。3.x与2.x不完全兼容，与2.x相比，主要的不同之处在于OpenCV 3.x 的大部分方法都使用了OpenCL加速。3.x默认包含以及使用IPP，同时，matlab bindings、Face Recognition、SIFT、SURF、 text detector、motion templates &amp;amp; simple flow 等都移到了opencv_contrib下（opencv_contrib不仅存放了尚未稳定的代码，同时也存放了涉及专利保护的技术实现），大量涌现的新方法也包含在其中。
2017年8月3.3版本，2017年12月开始的3.4.x版本，opencv_dnn从opencv_contrib移至opencv，同时OpenCV开始支持C++ 11构建，之后明显感到对神经网络的支持在加强，opencv_dnn被持续改进和扩充。
0x04 OpenCV 4.</description></item><item><title>Win10和Ubuntu18.04多显卡的双系统安装</title><link>https://mukhali.github.io/2019/win10%E5%92%8Cubuntu18.04%E5%A4%9A%E6%98%BE%E5%8D%A1%E7%9A%84%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</link><pubDate>Thu, 18 Apr 2019 22:55:46 +0800</pubDate><guid>https://mukhali.github.io/2019/win10%E5%92%8Cubuntu18.04%E5%A4%9A%E6%98%BE%E5%8D%A1%E7%9A%84%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</guid><description>0x00 引言 东京大学入学祝词：等着你的，是个努力也得不到回报的社会。
爷爷说：在外面好好弄，莫担心他。(或许只有这些老人才让我有些动力，因为他们永远会觉得满足。)
0x01 场景 两块 SSD 硬盘，准备装 Win 10 和 Ubuntu 18.04 双系统，每块硬盘分两个区：EFI 引导区和系统盘。
先安装Win 10系统，后安装 Ubuntu 18.04。
0x02 卡着 Win 10 好安装，但当安装 Ubuntu 18.04 的时候会卡在 GUI 界面，鼠标和键盘都不能动。所以需要在 Ubuntu 进入 install Ubuntu 界面的时候按 e 键，将第二行的 quiet splash - - - 修改成 quiet splash nomodeset。nomodeset表示用电脑集显来进行显示。然后按F10继续安装。
0x03 安装驱动 安装好系统后，就需要安装显卡驱动了，要不然下次启动系统的时候又很慢。安装驱动大概有三种方法，选择一个有效 的就可以，不需要三个都用。
sudo apt-get update -y sudo apt-get upgrade -y ubuntu-drivers devices sudo ubuntu-drivers autoinstall sudo reboot sudo apt-get update -y sudo apt-get upgrade -y sudo add-apt-repository -y ppa:graphics-drivers/ppa sudo apt-get update -y sudo ubuntu-drivers autoinstall sudo reboot 从官方下载驱动安装 0x04 双启 安装好之后，每次启动还是只能进入 Ubuntu 系统，需要将 Win 10 加入 Ubuntu 的引导。</description></item><item><title>Sqlite3数据库合并</title><link>https://mukhali.github.io/2019/sqlite3%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%88%E5%B9%B6/</link><pubDate>Wed, 09 Jan 2019 16:02:17 +0800</pubDate><guid>https://mukhali.github.io/2019/sqlite3%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%88%E5%B9%B6/</guid><description>0x00 引言 再简单的事情，也需要有人去做。
0x01 需求 存在多个数据库，需要合并，数据库中相同表的结构是一样的。 主要是使用了Sqlite3的系统表sqlite_master。
0x02 Python 代码 # coding=utf-8 import sys, sqlite3, os def merge_tables(tables_file_a, tables_file_b, con_file_a): print(&amp;quot;Start Merge Tables&amp;quot;) j = 0 while j &amp;lt; len(tables_file_b): if not tables_file_b[j] in tables_file_a: cur_table_file_a = con_file_a.cursor() try: cur_table_file_a.execute(tables_file_b[j][3:-3]) except: print(&amp;quot;Error: &amp;quot; + tables_file_b[j][3:-3]) j += 1 else: j += 1 print(&amp;quot;All Tables Merged!&amp;quot;) def merge_index(tables_file_a, tables_file_b, con_file_a): print(&amp;quot;Start Merge Index&amp;quot;) j = 0 while j &amp;lt; len(tables_file_b): if not tables_file_b[j] in tables_file_a: cur_table_file_a = con_file_a.</description></item><item><title>Emacs喜欢神器</title><link>https://mukhali.github.io/2016/emacs%E5%96%9C%E6%AC%A2%E7%A5%9E%E5%99%A8/</link><pubDate>Tue, 08 Mar 2016 20:19:37 +0800</pubDate><guid>https://mukhali.github.io/2016/emacs%E5%96%9C%E6%AC%A2%E7%A5%9E%E5%99%A8/</guid><description>0x00 引言 Emacs是一个操作系统级别Editor，最初由Richard Stallman(理查德·马修·斯托曼)于1975年在MIT协同Guy Steele共同完成。很可能有人喜欢UNIX哲学，而讨厌Emacs这种包含万物的行为。而我会说“我喜欢UNIX哲学，也拥抱Emacs”。
0x01 Appointment 在diary文件中编辑你的安排如下
Monday 8:00am 该工作咯 3:00pm 看会儿paper Tuesday 8:00am 该工作咯 3:00pm 看会儿paper Wednesday 8:00am 该工作咯 3:00pm 看会儿paper Thursday 8:00am 该工作咯 3:00pm 看会儿paper Friday 8:00am 该工作咯 3:00pm 看会儿paper * 1 清理一遍阅读列表，学习一个新主题 在你自己的配置文件中添加以下代码：
(global-set-key (kbd &amp;quot;&amp;lt;f9&amp;gt;&amp;quot;) &#39;(lambda () (interactive) (progn (if (not (featurep &#39;appt)) (appt-activate) (unless appt-timer (appt-activate))) ))) ;quick access to Calendar and Diary 每次打开Emacs的时候，按f9就能激活提醒了。
0x02 Calendar 在生活中总有些节日不能错过， 在过往的时间中总有些日子不能忘怀， 在这世间总有些人不能不挂念，</description></item><item><title>Git喜欢版本管理</title><link>https://mukhali.github.io/2016/git%E5%96%9C%E6%AC%A2%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</link><pubDate>Tue, 19 Jan 2016 09:51:04 +0800</pubDate><guid>https://mukhali.github.io/2016/git%E5%96%9C%E6%AC%A2%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</guid><description>0x00 引言 Git是一个分布式版本控制／软件配置管理软件，原是Linux内核开发者林纳斯·托瓦兹（Linus Torvalds）为更好地管理Linux内核开发而设计。本文记录了一些基本概念和基本操作，当然关于使用 Git 最重要的其实不是明白这些，而是掌握一些Git的使用模式。 当你用上了Git，其它那些版本管理系统真的不想再动了。Git是我最喜欢的工具之一，另一个就是Emacs。
0x01 关键字 HEAD：指针 工作区 版本库(working tree) 暂存区(index)：add命令将文件添加到暂存区 已跟踪(staging)（未更新、已修改、已放入暂存区） 未跟踪(unstage) 仓库：commit将文件从暂存区添加到仓库 0x02 版本管理可以细分为 本地分支管理、远程分支管理、补丁管理、暂存（index）管理、
0x03 安装 如果你是在Debian，Ubuntu系统中，那么你可以通过下面命令安装：
sudo apt-get install git 如果你是在Red Hat，Fedora系统中，那么你可以通过下面命令安装：
sudo yum install git 我是通过下面这条命令来安装的：
pacman -S git 0x04 配置 git config --global user.name &amp;quot;name&amp;quot; git config --global user.email &amp;quot;name@gmail.com&amp;quot; git config --global color.ui true git config core.ignorecase false git config -l #list all the Git config 这样配置完后，保存在~/.</description></item></channel></rss>