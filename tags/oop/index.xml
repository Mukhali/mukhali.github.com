<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OOP on 当然我在扯淡</title><link>https://mukhali.github.io/tags/oop/</link><description>Recent content in OOP on 当然我在扯淡</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 13 Jan 2019 17:22:39 +0800</lastBuildDate><atom:link href="https://mukhali.github.io/tags/oop/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang的面向对象</title><link>https://mukhali.github.io/2019/golang%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link><pubDate>Sun, 13 Jan 2019 17:22:39 +0800</pubDate><guid>https://mukhali.github.io/2019/golang%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid><description>0x00 引言 再简单的事情，也需要有人去做。
0x01 成员变量 type Person struct { name string age int } person := Person{&amp;quot;mike&amp;quot;,18} fmt.Println(person) 0x02 成员函数 func (person *Person) showInfo() { fmt.Printf(&amp;quot;My name is %s , age is %d &amp;quot;,person.name,person.age) } func (person *Person) setAge(age int) { person.age = age } person := Person{&amp;quot;mike&amp;quot;,18} person.showInfo() person.setAge(20) fmt,Println(person) 0x03 继承 没有关键字的继承。
type Student struct { Person id int score int } func (student *Student) showInfo() { fmt.</description></item></channel></rss>