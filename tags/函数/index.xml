<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>函数 on 当然我在扯淡</title><link>https://mukhali.github.io/tags/%E5%87%BD%E6%95%B0/</link><description>Recent content in 函数 on 当然我在扯淡</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 19 Feb 2019 23:04:40 +0800</lastBuildDate><atom:link href="https://mukhali.github.io/tags/%E5%87%BD%E6%95%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>Cpp语言回调函数</title><link>https://mukhali.github.io/2019/cpp%E8%AF%AD%E8%A8%80%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</link><pubDate>Tue, 19 Feb 2019 23:04:40 +0800</pubDate><guid>https://mukhali.github.io/2019/cpp%E8%AF%AD%E8%A8%80%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</guid><description> 0x00 引言 想注册一个公众号，我好像文笔不是很好，我有很多内容可写，时间和文笔去哪儿找。
Pytorch 1.0 才发布不久，但整个机器学习领域很成熟了，可以弥补不足。
0x01 函数指针 struct IDataReader { virtual void ReadCallbackFunc(std::string topicName) = 0; }; class Subscriber { public: Subscriber(); ~Subscriber(); bool SetCallback(IDataReader* iReader) { _process = iReader; _process(&amp;quot;callback&amp;quot;); return true; } private: IDataReader * _process; }; 0x02 Cpp调用 具体代码如下：
class Example_Subscriber : IDataReader { public: Example_Subscriber() {}; ~Example_Subscriber(); void example_subscriber_main(); void CallbackFunc(std::string topicName); private: Subscriber * subscriberPtr; }; Example_Subscriber::Example_Subscriber() { subscriberPtr = new Subscriber(); } Example_Subscriber::~Example_Subscriber() { delete subscriberPtr; } void Example_Subscriber::example_subscriber_main() { subscriberPtr-&amp;gt;SetCallback(this); } void Example_Subscriber::CallbackFunc(std::string topicName) { printf(topicName); } int main() { Example_Subscriber * sub = new Example_Subscriber(); sub-&amp;gt;subscriber_main(); } 0x03 UPDATE 2019-03-01</description></item><item><title>C语言回调函数</title><link>https://mukhali.github.io/2019/c%E8%AF%AD%E8%A8%80%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</link><pubDate>Tue, 19 Feb 2019 22:00:21 +0800</pubDate><guid>https://mukhali.github.io/2019/c%E8%AF%AD%E8%A8%80%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</guid><description>0x00 引言 再简单的事情，也需要有人去做。
0x01 函数指针 C语言的回调函数主要通过函数指针的方式实现，相关主要代码如下：
typedef void(*CallbackFunc)(int mes_length); void callback(int mes_length) // 回调函数 { std::cout &amp;lt;&amp;lt; mes_length &amp;lt;&amp;lt;std::endl; } extern &amp;quot;C&amp;quot; void __declspec(dllimport) SetReadCallback(CallbackFunc callback) // 调用函数 { int length = 0; callback(length); } int main(int argc,char* argv[]) // 实现函数回调 { SetReadCallback(callback); return 0; } 0x02 C调用 void callback(int mes_length) { std::cout &amp;lt;&amp;lt; mes_length &amp;lt;&amp;lt;std::endl; } int main() { SetReadCallback(callback); return 0; } 0x03 C#调用 C#这边主要通过委托（delegate）来实现，具体代码如下：</description></item></channel></rss>