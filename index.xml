<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>当然我在扯淡 on 当然我在扯淡</title><link>https://mukhali.github.io/</link><description>Recent content in 当然我在扯淡 on 当然我在扯淡</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 31 Dec 2018 17:08:39 +0800</lastBuildDate><atom:link href="/" rel="self" type="application/rss+xml"/><item><title>2018年的杂记</title><link>https://mukhali.github.io/2018/2018%E5%B9%B4de%E6%9D%82%E8%AE%B0/</link><pubDate>Mon, 31 Dec 2018 17:08:39 +0800</pubDate><guid>https://mukhali.github.io/2018/2018%E5%B9%B4de%E6%9D%82%E8%AE%B0/</guid><description>
&lt;h2 id=&#34;0x00-引言&#34;&gt;0x00 引言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;每个人都有缺点，我也不例外。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;0x01-只言片语&#34;&gt;0x01 只言片语&lt;/h2&gt;
&lt;p&gt;又是一年过去了，我也已经过三十了。&lt;/p&gt;
&lt;p&gt;今年自己想做的都做了吗？好像没有，只是时间已经流逝。&lt;/p&gt;
&lt;p&gt;回头看毕业两年，未来该怎么走？我不知道，我只知道我该往前使劲走。&lt;/p&gt;
&lt;p&gt;如果我是一匹野马，自该有自己的草原，如果没有，我将去寻找。&lt;/p&gt;
&lt;p&gt;2018 电脑、手机……&lt;/p&gt;
&lt;p&gt;2019年我该往哪儿使劲？&lt;/p&gt;
&lt;p&gt;我一定要去做云开发，基于Golang……寻找自己的草原&lt;/p&gt;
&lt;p&gt;努力去做吧，谁又曾知道。&lt;/p&gt;</description></item><item><title>洗衣机的选择</title><link>https://mukhali.github.io/2018/%E6%B4%97%E8%A1%A3%E6%9C%BAde%E9%80%89%E6%8B%A9/</link><pubDate>Mon, 31 Dec 2018 11:19:37 +0800</pubDate><guid>https://mukhali.github.io/2018/%E6%B4%97%E8%A1%A3%E6%9C%BAde%E9%80%89%E6%8B%A9/</guid><description>
&lt;h2 id=&#34;0x00-引言&#34;&gt;0x00 引言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;以前不懂，以后就懂了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;0x01-关于洗衣机&#34;&gt;0x01 关于洗衣机&lt;/h2&gt;
&lt;p&gt;店里的洗衣机停工快一年了，最近天气变冷，在给店了挑选洗衣机。以前不懂洗衣机器，最近查了一下，考虑到空间和合用性，最后选了海尔。&lt;/p&gt;
&lt;p&gt;市场上的情况是：海尔洗衣机市场占有率第一、小天鹅专做洗衣机，18年被美的收购、容声是做冰箱出身的。&lt;/p&gt;
&lt;p&gt;洗衣机可以分两类：波轮式和滚筒式。我喜欢滚筒样式。&lt;/p&gt;
&lt;p&gt;我以前不懂，以后就懂了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mukhali.github.io/images/posts/washing_machine.jpeg&#34; width=&#34;50%&#34; height=&#34;50%&#34; /&gt;&lt;/p&gt;</description></item><item><title>About</title><link>https://mukhali.github.io/about/</link><pubDate>Mon, 24 Dec 2018 11:38:26 +0800</pubDate><guid>https://mukhali.github.io/about/</guid><description>&lt;p&gt;你好,不知是什么&lt;/p&gt;
&lt;p&gt;Surely I Am Joking&lt;/p&gt;</description></item><item><title>Emacs喜欢神器</title><link>https://mukhali.github.io/2016/emacs%E5%96%9C%E6%AC%A2%E7%A5%9E%E5%99%A8/</link><pubDate>Tue, 08 Mar 2016 20:19:37 +0800</pubDate><guid>https://mukhali.github.io/2016/emacs%E5%96%9C%E6%AC%A2%E7%A5%9E%E5%99%A8/</guid><description>
&lt;h2 id=&#34;0x00-引言&#34;&gt;0x00 引言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Emacs是一个操作系统级别Editor，最初由Richard Stallman(理查德·马修·斯托曼)于1975年在MIT协同Guy Steele共同完成。很可能有人喜欢UNIX哲学，而讨厌Emacs这种包含万物的行为。而我会说“我喜欢UNIX哲学，也拥抱Emacs”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;0x01-appointment&#34;&gt;0x01 Appointment&lt;/h2&gt;
&lt;p&gt;在diary文件中编辑你的安排如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Monday
8:00am 该工作咯
3:00pm 看会儿paper
Tuesday
8:00am 该工作咯
3:00pm 看会儿paper
Wednesday
8:00am 该工作咯
3:00pm 看会儿paper
Thursday
8:00am 该工作咯
3:00pm 看会儿paper
Friday
8:00am 该工作咯
3:00pm 看会儿paper
* 1 清理一遍阅读列表，学习一个新主题
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在你自己的配置文件中添加以下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(global-set-key (kbd &amp;quot;&amp;lt;f9&amp;gt;&amp;quot;)
&#39;(lambda () (interactive)
(progn
(if (not (featurep &#39;appt))
(appt-activate)
(unless appt-timer
(appt-activate)))
))) ;quick access to Calendar and Diary
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;每次打开Emacs的时候，按f9就能激活提醒了。&lt;/p&gt;
&lt;h2 id=&#34;0x02-calendar&#34;&gt;0x02 Calendar&lt;/h2&gt;
&lt;p&gt;在生活中总有些节日不能错过，
在过往的时间中总有些日子不能忘怀，
在这世间总有些人不能不挂念，&lt;/p&gt;
&lt;p&gt;那么cal-china-x就能登上舞台，解决你的这些问题了，它可以记录农历的节日，也可以记录阳历。每天打开Emacs就能看到近日的重要事件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; (if (&amp;lt; (string-to-number (format-time-string &amp;quot;%H&amp;quot;)) 9)
(calendar)
(switch-to-buffer &amp;quot;*scratch*&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;0x03-writeroom-mode&#34;&gt;0x03 writeroom mode&lt;/h2&gt;
&lt;p&gt;当你在写作或者编码时，是不是不喜欢被打扰？那么这个包就是你想要的。还记当年流行全屏写作软件，到处找软件的日子吗？有过iA Writer使用经历吗？&lt;/p&gt;
&lt;p&gt;在Emacs中，你安装writeroom包后，就能完全沉浸在自己快乐写作或编码中，不会有任何打扰。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/673794-b25d5f45d64087d1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;Emacs写作&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;0x04-focus-mode&#34;&gt;0x04 focus mode&lt;/h2&gt;
&lt;p&gt;当你写作或者编码时，是不是想减少关注点？那么focus包就是你要的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/673794-7f7d53db072adbe6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;Emacs专注&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;0x05-auctex&#34;&gt;0x05 Auctex&lt;/h2&gt;
&lt;p&gt;在使用Emacs之前，我一直使用TeXstudio作为TeXLive的前端，写作时使用Sublime。当你遇见Auctex时，你会喜欢上她的。&lt;/p&gt;
&lt;h2 id=&#34;0x06-time-format&#34;&gt;0x06 Time Format&lt;/h2&gt;
&lt;p&gt;当你全屏Emacs后，无法看到时间，你可以通过这个在mode line上看到时间奥。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; (setq display-time-24hr-format t
;; display-time-format &amp;quot;%d | %H:%M&amp;quot;
;; display-time-day-and-date t
;; display-time-interval 60
display-time-default-load-average nil)
(display-time-mode)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;0x07-org-pomodoro&#34;&gt;0x07 Org Pomodoro&lt;/h2&gt;
&lt;p&gt;org-pomodoro自带的显示样式，太长。占地方，我需要短些的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; (custom-set-variables
&#39;(org-pomodoro-format &amp;quot;•%s&amp;quot;)
&#39;(org-pomodoro-short-break-format &amp;quot;•%s&amp;quot;) )
(add-hook &#39;org-pomodoro-finished-hook
(lambda ()
(mukhali/terminal-notifier-notify &amp;quot;Pomodoro&amp;quot; &amp;quot;time-for-relax&amp;quot;)))
(add-hook &#39;org-pomodoro-short-break-finished-hook
(lambda ()
(mukhali/terminal-notifier-notify &amp;quot;Break-Completed&amp;quot; &amp;quot;ready-for-another?&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/673794-5c1cbfd6ee0cb8d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;定制后的显示样式&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;0x08-org-todo&#34;&gt;0x08 Org Todo&lt;/h2&gt;
&lt;p&gt;任何事物默认设置永远不会是你想要的，就像QQ默认设置一样：不断打扰你，不断让你去社交。&lt;/p&gt;
&lt;p&gt;Org 的设置还是需要定制的，根据自己的需求，使用频率去定制自己的方式。下面是我的一些基本定制内容。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; (define-key global-map (kbd &amp;quot;&amp;lt;f7&amp;gt;&amp;quot;) &#39;org-agenda-list)
(define-key global-map (kbd &amp;quot;&amp;lt;f9&amp;gt;&amp;quot;)
(lambda () (interactive) (org-capture nil &amp;quot;w&amp;quot;)))
(with-eval-after-load &#39;org-agenda
(define-key org-agenda-mode-map (kbd &amp;quot;P&amp;quot;) &#39;org-pomodoro))
;; (setq org-directory &amp;quot;~/org/&amp;quot;)
(setq org-deadline-warning-days 4)
(setq org-agenda-files (list
&amp;quot;~/org/works.org&amp;quot;))
(setq org-src-fontify-natively t)
;; (setq org-default-notes-file (concat org-directory &amp;quot;notes.org&amp;quot;))
;; (setq org-agenda-include-diary t)
(setq org-refile-targets
&#39;((nil :maxlevel . 5) (org-agenda-files :maxlevel . 5)))
(setq org-todo-keywords
&#39;((sequence &amp;quot;TODO(t)&amp;quot; &amp;quot;|&amp;quot; &amp;quot;DONE(d)&amp;quot; &amp;quot;CANCELED(c)&amp;quot;)))
(setq org-capture-templates
&#39;((&amp;quot;w&amp;quot; &amp;quot;I always arrive late at the office,
but I make up for it by leaving early.&amp;quot;
entry (file+headline &amp;quot;works.org&amp;quot; &amp;quot;Works&amp;quot;)
&amp;quot;* TODO %?\n %i\n SCHEDULED: %t\n %a&amp;quot; :empty-lines 1)))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;0x09-windows-notifier&#34;&gt;0x09 Windows notifier&lt;/h2&gt;
&lt;p&gt;不喜欢Emacs自带的notifier，感谢开源运动，让我有解决方案可选。下面是我的定制。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; (setq terminal-notifier-command
&amp;quot;~/plugins/growlnotify.exe&amp;quot;)
(defun mukhali/terminal-notifier-notify (title message)
(shell-command-to-string
(concat terminal-notifier-command
&amp;quot; /t:&amp;quot; title
&amp;quot; /i:&amp;quot; &amp;quot;~/plugins/emacs.png&amp;quot;)
&amp;quot; &amp;quot; message)))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;0x10-杂项&#34;&gt;0x10 杂项&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;;; Emacs 启动时所在的位置
(setq default-frame-alist &#39;((left . 0) (top . 0) (width . 80) (height . 38)))
;; 自己的一些Windows使用习惯
(define-key global-map (kbd &amp;quot;M-&amp;lt;f4&amp;gt;&amp;quot;)
(lambda () (interactive)
(recentf-cleanup)
(projectile-cleanup-known-projects)
(spacemacs/save-buffers-kill-emacs)
) )
(define-key global-map (kbd &amp;quot;M-C-q&amp;quot;) &#39;winner-undo)
(global-unset-key (kbd &amp;quot;C-x C-s&amp;quot;))
(global-set-key (kbd &amp;quot;C-s&amp;quot;) &#39;save-buffer)
;; 一些常用函数
(defun mukhali/quick-folding-source ()
(interactive)
(set-selective-display
(if selective-display nil 1)))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;0x11-update&#34;&gt;0x11 UPDATE&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;2016-03-08
2016-04-20
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>Git喜欢版本管理</title><link>https://mukhali.github.io/2016/git%E5%96%9C%E6%AC%A2%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</link><pubDate>Tue, 19 Jan 2016 09:51:04 +0800</pubDate><guid>https://mukhali.github.io/2016/git%E5%96%9C%E6%AC%A2%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</guid><description>
&lt;h2 id=&#34;0x00-引言&#34;&gt;0x00 引言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Git是一个分布式版本控制／软件配置管理软件，原是Linux内核开发者林纳斯·托瓦兹（Linus Torvalds）为更好地管理Linux内核开发而设计。本文记录了一些基本概念和基本操作，当然关于使用 Git 最重要的其实不是明白这些，而是掌握一些Git的使用模式。
当你用上了Git，其它那些版本管理系统真的不想再动了。Git是我最喜欢的工具之一，另一个就是Emacs。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;0x01-关键字&#34;&gt;0x01 关键字&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;HEAD：指针
工作区
版本库(working tree)
暂存区(index)：add命令将文件添加到暂存区
已跟踪(staging)（未更新、已修改、已放入暂存区）
未跟踪(unstage)
仓库：commit将文件从暂存区添加到仓库
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;0x02-版本管理可以细分为&#34;&gt;0x02 版本管理可以细分为&lt;/h2&gt;
&lt;p&gt;本地分支管理、远程分支管理、补丁管理、暂存（index）管理、&lt;/p&gt;
&lt;h2 id=&#34;0x03-安装&#34;&gt;0x03 安装&lt;/h2&gt;
&lt;p&gt;如果你是在Debian，Ubuntu系统中，那么你可以通过下面命令安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你是在Red Hat，Fedora系统中，那么你可以通过下面命令安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo yum install git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我是通过下面这条命令来安装的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pacman -S git
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;0x04-配置&#34;&gt;0x04 配置&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git config --global user.name &amp;quot;name&amp;quot;
git config --global user.email &amp;quot;name@gmail.com&amp;quot;
git config --global color.ui true
git config core.ignorecase false
git config -l #list all the Git config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样配置完后，保存在~/.gitconfig&lt;/p&gt;
&lt;h2 id=&#34;0x05-查看帮助&#34;&gt;0x05 查看帮助&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git help
git help -show #查看show命令的子命令
git add -h #查看git add命令的帮助文件
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;0x06-常用命令-查看-添加-提交-删除-找回-重置&#34;&gt;0x06 常用命令（查看、添加、提交、删除、找回、重置）&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git show 356f6def9d3fb7f3b9032ff5aa4b9110d4cca87e
#（哈希值，可以是具体某个文件的，也可以是某一次全部提交）
checkout #重写工作区
git co（git co HEAD） #汇总显示工作区、暂存区与HEAD的差异
git co master #取出master版本的HEAD
git co -- filename #把filename文件从HEAD中checkouut。
#相当于取消自上次执行git add filename以来的本地修改。
git co branch --filename #用branch分支filename 来替换暂存区和工作区文件。
git co . (git co -- .) #用暂存区的文件代替所有现有项目文件。
git add #命令主要用于把我们要提交的文件的信息添加到索引库(暂存区)中。
#当我们使用git commit时，git将依据索引库中的内容来进行文件的提交。
git add filename
git add . #将修改过的工作文件提交暂存区
git add -u
#表示 add to index only files modified or deleted and not those created
git add -i [&amp;lt;path&amp;gt;] #命令查看&amp;lt;path&amp;gt;中被所有修改过或已删除文件但没有提交的文件。
git ci #是将那些已经add到暂存区的文件commit到库中。
git ci filemame
git ci .
git ci -a #将git add, git rm和git commit等操作都合并在一起做。
git ci -m &amp;quot;what u want to &amp;quot;
git ci -am &amp;quot;what u want to &amp;quot;
git ci -amend #?
git rm filename #删除文件，并从版本库中删除。
git rm -r dire #删除文件，并从库中移除。
git rm filename --cached #从版本库中删除文件，但不删除文件。
reset #命令可以去掉一些多余的状态和版本信息。
git reset [--hard|soft|mixed|merge|keep] [brank or HEAD] #reset命令是有mode的。
git reset filename
git reset -- .
git resert --hard #恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改
git revert
#撤销某次操作，此次操作之前和之后的commit和history都会保留，并且把这次撤销作为一次最新的提交
git revert HEAD #撤销前一次commit
git revert HEAD^ #撤销前前一次commit
git revert &amp;lt;id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;0x07-查看文件的不同&#34;&gt;0x07 查看文件的不同&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git diff filename #比较当前文件（工作区文件）和暂存区（索引区）文件的差异。
git diff &amp;lt;id&amp;gt; &amp;lt;id&amp;gt; #比较两次提交之间的差异
git diff &amp;lt;branch1&amp;gt;..&amp;lt;branch2&amp;gt; # 在两个分支之间比较
git diff --staged # 比较暂存区和版本库差异
git diff --cached # 比较暂存区和版本库差异
git diff --stat # 仅仅比较统计信息
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;0x08-查看提交记录&#34;&gt;0x08 查看提交记录&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git lg
git lg &amp;lt;file&amp;gt; # 查看该文件每次提交记录
git lg -p &amp;lt;file&amp;gt; # 查看每次详细修改内容的diff
git lg -p -2 # 查看最近两次详细修改内容的diff
git lg --stat # 查看提交统计信息
git lg --pretty=oneline --graph #精简信息显示方式
git lg --pretty=format:&amp;quot;%h - %an, %ar : %s&amp;quot; --graph
git lg --pretty=oneline filename
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;0x09-本地分支管理&#34;&gt;0x09 本地分支管理&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git branch -r
git br -r # 查看远程分支
git br &amp;lt;new_branch&amp;gt; # 创建新的分支
git br -v # 查看各个分支最后提交信息
git br --merged # 查看已经被合并到当前分支的分支
git br --no-merged # 查看尚未被合并到当前分支的分支
git co &amp;lt;branch&amp;gt; # 切换到某个分支
git co -b &amp;lt;new_branch&amp;gt; # 创建新的分支，并且切换过去
git co -b &amp;lt;new_branch&amp;gt; &amp;lt;branch&amp;gt; # 基于branch创建新的new_branch
git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除
git co $id -b &amp;lt;new_branch&amp;gt; # 把某次历史提交记录checkout出来，创建成一个分支
git br -d &amp;lt;branch&amp;gt; # 删除某个分支
git br -D &amp;lt;branch&amp;gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;0x10-分支合并和rebase&#34;&gt;0x10 分支合并和rebase&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git merge &amp;lt;branch&amp;gt; # 将branch分支合并到当前分支
git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交
git rebase master &amp;lt;branch&amp;gt; # 将master rebase到branch，相当于：
git co &amp;lt;branch&amp;gt; &amp;amp;&amp;amp; git rebase master &amp;amp;&amp;amp; git co master &amp;amp;&amp;amp; git merge &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;0x11-补丁管理&#34;&gt;0x11 补丁管理&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git diff &amp;gt; ../sync.patch # 生成补丁
git apply ../sync.patch # 打补丁
git apply --check ../sync.patch # 测试补丁能否成功
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;0x12-暂存管理&#34;&gt;0x12 暂存管理&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git stash # 暂存
git stash list # 列所有stash
git stash apply # 恢复暂存的内容
git stash drop # 删除暂存区
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;0x13-远程分支管理&#34;&gt;0x13 远程分支管理&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git pull # 抓取远程仓库所有分支更新并合并到本地
git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并
git fetch origin # 抓取远程仓库更新
git merge origin/master # 将远程主分支合并到本地当前分支
git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支
git co -b &amp;lt;local_branch&amp;gt; origin/&amp;lt;remote_branch&amp;gt; # 基于远程分支创建本地分支，功能同上
git push # push所有分支
git push origin master # 将本地主分支推到远程主分支
git push -u origin master
# 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)
git push origin &amp;lt;local_branch&amp;gt; # 创建远程分支， origin是远程仓库名
git push origin &amp;lt;local_branch&amp;gt;:&amp;lt;remote_branch&amp;gt; # 创建远程分支
git push origin :&amp;lt;remote_branch&amp;gt;
#先删除本地分支(git br -d &amp;lt;branch&amp;gt;)，然后再push删除远程分支
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;0x14-远程仓库管理&#34;&gt;0x14 远程仓库管理&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git remote -v # 查看远程服务器地址和仓库名称
git remote show origin # 查看远程服务器仓库状态
git remote add origin git@github:robbin/robbin_site.git
# 添加远程仓库地址
git remote set-url origin git@github.com:robbin/robbin_site.git
# 设置远程仓库地址(用于修改远程仓库地址)
git remote rm &amp;lt;repository&amp;gt; # 删除远程仓库
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;0x15-创建远程仓库&#34;&gt;0x15 创建远程仓库&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库
scp -r my_project.git git@git.csdn.net:~ # 将纯仓库上传到服务器上
mkdir robbin_site.git &amp;amp;&amp;amp; cd robbin_site.git &amp;amp;&amp;amp; git --bare init # 在服务器创建纯仓库
git remote add origin git@github.com:robbin/robbin_site.git # 设置远程仓库地址
git push -u origin master # 客户端首次提交
git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track
git remote set-head origin master # 设置远程仓库的HEAD指向master分支
#也可以命令设置跟踪远程库和本地库
git br --set-upstream master origin/master
git br --set-upstream develop origin/develop
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;0x16-update&#34;&gt;0x16 UPDATE&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;2016-01-19（还有一部分设置没有更新）
&lt;/code&gt;&lt;/pre&gt;</description></item></channel></rss>